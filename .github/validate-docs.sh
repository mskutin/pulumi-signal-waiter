#!/bin/bash

# Documentation Validation Script
# This script validates documentation structure and content

set -e

echo "üìö Validating Documentation Structure..."

ISSUES_FOUND=0

# Check README.md
echo ""
echo "üìã Checking README.md..."
if [ -f "README.md" ]; then
    # Check for required sections
    if grep -q "## .*Installation" README.md; then
        echo "‚úÖ Installation section found"
    else
        echo "‚ùå Missing Installation section"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
    
    if grep -q "## .*Usage" README.md; then
        echo "‚úÖ Usage section found"
    else
        echo "‚ùå Missing Usage section"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
    
    if grep -q "## .*License" README.md; then
        echo "‚úÖ License section found"
    else
        echo "‚ö†Ô∏è  License section missing (recommended)"
    fi
    
    # Check for badges
    if grep -q "!\[.*\](" README.md; then
        echo "‚úÖ Badges found"
    else
        echo "‚ö†Ô∏è  No badges found (consider adding status badges)"
    fi
    
    # Check for code examples
    if grep -q "\`\`\`" README.md; then
        echo "‚úÖ Code examples found"
    else
        echo "‚ö†Ô∏è  No code examples found"
    fi
else
    echo "‚ùå README.md not found"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

# Check CONTRIBUTING.md
echo ""
echo "üìã Checking CONTRIBUTING.md..."
if [ -f "CONTRIBUTING.md" ]; then
    echo "‚úÖ CONTRIBUTING.md found"
    
    if grep -q "Getting Started\|Development Setup" CONTRIBUTING.md; then
        echo "‚úÖ Development setup instructions found"
    else
        echo "‚ö†Ô∏è  Consider adding development setup instructions"
    fi
else
    echo "‚ö†Ô∏è  CONTRIBUTING.md not found (recommended for open source projects)"
fi

# Check CHANGELOG.md
echo ""
echo "üìã Checking CHANGELOG.md..."
if [ -f "CHANGELOG.md" ]; then
    echo "‚úÖ CHANGELOG.md found"
    
    if grep -q "Unreleased\|## \[" CHANGELOG.md; then
        echo "‚úÖ Proper changelog format detected"
    else
        echo "‚ö†Ô∏è  Consider using standard changelog format"
    fi
else
    echo "‚ö†Ô∏è  CHANGELOG.md not found (recommended)"
fi

# Check LICENSE
echo ""
echo "üìã Checking LICENSE..."
if [ -f "LICENSE" ] || [ -f "LICENSE.md" ] || [ -f "LICENSE.txt" ]; then
    echo "‚úÖ License file found"
else
    echo "‚ö†Ô∏è  License file not found (recommended)"
fi

# Check examples directory
echo ""
echo "üìã Checking examples..."
if [ -d "examples" ]; then
    echo "‚úÖ Examples directory found"
    
    EXAMPLE_COUNT=$(find examples -name "*.ts" -o -name "*.js" | wc -l)
    if [ "$EXAMPLE_COUNT" -gt 0 ]; then
        echo "‚úÖ Found $EXAMPLE_COUNT example files"
    else
        echo "‚ö†Ô∏è  No example files found in examples directory"
    fi
    
    if [ -f "examples/README.md" ]; then
        echo "‚úÖ Examples documentation found"
    else
        echo "‚ö†Ô∏è  Consider adding examples/README.md"
    fi
else
    echo "‚ö†Ô∏è  Examples directory not found (recommended)"
fi

# Check docs directory
echo ""
echo "üìã Checking docs..."
if [ -d "docs" ]; then
    echo "‚úÖ Docs directory found"
    
    if [ -f "docs/TROUBLESHOOTING.md" ]; then
        echo "‚úÖ Troubleshooting guide found"
    else
        echo "‚ö†Ô∏è  Consider adding troubleshooting documentation"
    fi
else
    echo "‚ö†Ô∏è  Docs directory not found (consider adding for additional documentation)"
fi

# Check package.json documentation fields
echo ""
echo "üìã Checking package.json documentation fields..."
if [ -f "package.json" ]; then
    if grep -q '"description"' package.json; then
        echo "‚úÖ Package description found"
    else
        echo "‚ùå Missing package description"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
    
    if grep -q '"repository"' package.json; then
        echo "‚úÖ Repository URL found"
    else
        echo "‚ùå Missing repository URL"
        ISSUES_FOUND=$((ISSUES_FOUND + 1))
    fi
    
    if grep -q '"homepage"' package.json; then
        echo "‚úÖ Homepage URL found"
    else
        echo "‚ö†Ô∏è  Consider adding homepage URL"
    fi
    
    if grep -q '"keywords"' package.json; then
        echo "‚úÖ Keywords found"
    else
        echo "‚ö†Ô∏è  Consider adding keywords for discoverability"
    fi
else
    echo "‚ùå package.json not found"
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
fi

echo ""
echo "üèÅ Documentation validation complete!"

if [ $ISSUES_FOUND -gt 0 ]; then
    echo "‚ùå Found $ISSUES_FOUND critical documentation issues"
    exit 1
else
    echo "‚úÖ All critical documentation requirements met"
    exit 0
fi
