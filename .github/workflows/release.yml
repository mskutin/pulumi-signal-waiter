name: Release & Publish

on:
  push:
    tags:
      - "v*" # Trigger on version tags like v1.0.0

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.get_version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: ${{ steps.get_version.outputs.version }}"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid"

  test-and-build:
    name: Test & Build for Release
    runs-on: ubuntu-latest
    needs: validate-tag

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run full test suite
        run: |
          npm test
          npm run test:coverage

      - name: Build package
        run: npm run build

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ needs.validate-tag.outputs.version }}"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "package.json version: $PACKAGE_VERSION"
            echo "Git tag version: $TAG_VERSION"
            exit 1
          fi
          echo "✅ Versions match: $PACKAGE_VERSION"

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-tag, test-and-build]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build package
        run: npm run build

      - name: Publish to NPM
        run: |
          if [[ "${{ needs.validate-tag.outputs.version }}" == *"-"* ]]; then
            echo "Publishing pre-release version with --tag beta"
            npm publish --tag beta
          else
            echo "Publishing stable release with --tag latest"
            npm publish --tag latest
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-npm]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build package
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Create changelog
          CHANGELOG="## What's Changed
          
          $COMMITS
          
          ## Installation
          
          \`\`\`bash
          npm install @mskutin/pulumi-signal-waiter@${{ needs.validate-tag.outputs.version }}
          \`\`\`
          
          ## Documentation
          
          See the [README](https://github.com/mskutin/pulumi-signal-waiter#readme) for usage examples and API documentation."
          
          # Save to file and output
          echo "$CHANGELOG" > CHANGELOG.md
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create package archive
        run: npm pack

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.validate-tag.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.validate-tag.outputs.version, '-') }}

      - name: Upload package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mskutin-pulumi-signal-waiter-${{ needs.validate-tag.outputs.version }}.tgz
          asset_name: mskutin-pulumi-signal-waiter-${{ needs.validate-tag.outputs.version }}.tgz
          asset_content_type: application/gzip
